package com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.generated;

import com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost;
import com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount;
import com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.UserApplicationLog;
import com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.UserApplicationLogImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;

/**
 * Serializes and deserializes instances of UserApplicationLog.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserApplicationLogEntityStoreSerializerImpl implements EntityStoreSerializer<UserApplicationLog> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private final static int FIELD_USER_ACCOUNT_ID = 0;
    private final static int FIELD_JOB_POST_ID = 4;
    private final static int FKREF_USER_LOG_JOB_POST_ID_FK = 8;
    private final static int FKREF_USER_LOG_USER_ACCOUNT_ID_FK = 16;
    private final static int VARSIZE_BEGINS = 24;
    
    protected GeneratedUserApplicationLogEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, UserApplicationLog> serializer() {
        return (buffer, entity) -> {
            buffer.putInt(FIELD_USER_ACCOUNT_ID, entity.getUserAccountId());
            buffer.putInt(FIELD_JOB_POST_ID, entity.getJobPostId());
            buffer.putLong(FKREF_USER_LOG_JOB_POST_ID_FK, -1L); // Will be set later on in the decorator()-method.
            buffer.putLong(FKREF_USER_LOG_USER_ACCOUNT_ID_FK, -1L); // Will be set later on in the decorator()-method.
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfInt jobPost_idFieldCache = holder.getFieldCache(JobPost.ID.identifier());
        final FieldCache.OfInt userAccount_idFieldCache = holder.getFieldCache(UserAccount.ID.identifier());
        final LongToIntFunction jobPostIdDeserializer = intDeserializer(UserApplicationLog.JOB_POST_ID.identifier());
        final LongToIntFunction userAccountIdDeserializer = intDeserializer(UserApplicationLog.USER_ACCOUNT_ID.identifier());
        final LongUnaryOperator userLogJobPostIdFkResolver = ref -> {
            final int value = jobPostIdDeserializer.applyAsInt(ref);
            return jobPost_idFieldCache.any(value);
        };
        final LongUnaryOperator userLogUserAccountIdFkResolver = ref -> {
            final int value = userAccountIdDeserializer.applyAsInt(ref);
            return userAccount_idFieldCache.any(value);
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            buffer.putLong(rowOffset + FKREF_USER_LOG_JOB_POST_ID_FK, userLogJobPostIdFkResolver.applyAsLong(ref));
            buffer.putLong(rowOffset + FKREF_USER_LOG_USER_ACCOUNT_ID_FK, userLogUserAccountIdFkResolver.applyAsLong(ref));
        };
    }
    
    @Override
    public LongFunction<UserApplicationLog> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final UserApplicationLog entity = new UserApplicationLogImpl();
            entity.setUserAccountId(buffer.getInt(offset + FIELD_USER_ACCOUNT_ID));
            entity.setJobPostId(buffer.getInt(offset + FIELD_JOB_POST_ID));
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<UserApplicationLog> colId) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : 
                case JOB_POST_ID     : return int.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : 
                case "jobPostId"     : return int.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<UserApplicationLog> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<UserApplicationLog>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{jobPostId}->JobPost{id}": return finder("UserLog_JobPost_id_fk");
            case "{userAccountId}->UserAccount{id}": return finder("UserLog_UserAccount_id_fk");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "UserLog_JobPost_id_fk": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_USER_LOG_JOB_POST_ID_FK);
            case "UserLog_UserAccount_id_fk": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_USER_LOG_USER_ACCOUNT_ID_FK);
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'UserApplicationLog'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<UserApplicationLog> colId) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : 
                case JOB_POST_ID     : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : 
                case "jobPostId"     : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<UserApplicationLog> colId) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : 
                case JOB_POST_ID     : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : 
                case "jobPostId"     : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_USER_ACCOUNT_ID);
                case JOB_POST_ID     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_POST_ID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_USER_ACCOUNT_ID);
                case "jobPostId"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_POST_ID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<UserApplicationLog> colId) {
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", colId.getColumnId())
        );
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<UserApplicationLog> colId) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_USER_ACCOUNT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_USER_ACCOUNT_ID)
                );
                case JOB_POST_ID     : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_POST_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_POST_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_USER_ACCOUNT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_USER_ACCOUNT_ID)
                );
                case "jobPostId"     : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_POST_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_POST_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<UserApplicationLog> colId) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_USER_ACCOUNT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_USER_ACCOUNT_ID)
                );
                case JOB_POST_ID     : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_POST_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_POST_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_USER_ACCOUNT_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_USER_ACCOUNT_ID)
                );
                case "jobPostId"     : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_POST_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_POST_ID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<UserApplicationLog> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<UserApplicationLog> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<UserApplicationLog> colId, final int value) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_USER_ACCOUNT_ID),
                        operand
                    );
                }
                case JOB_POST_ID     : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_POST_ID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_USER_ACCOUNT_ID),
                        operand
                    );
                }
                case "jobPostId"     : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_POST_ID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<UserApplicationLog> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<UserApplicationLog> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<UserApplicationLog> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<UserApplicationLog> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<UserApplicationLog> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<UserApplicationLog> colId, final Object value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type object.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<UserApplicationLog> colId) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : 
                case JOB_POST_ID     : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : 
                case "jobPostId"     : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<UserApplicationLog> colId, final EntityStorePredicate predicate) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_USER_ACCOUNT_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case JOB_POST_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_POST_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_USER_ACCOUNT_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "jobPostId"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_POST_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<UserApplicationLog> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_USER_ACCOUNT_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case JOB_POST_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_POST_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_USER_ACCOUNT_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "jobPostId"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_POST_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<UserApplicationLog> colId, final EntityStoreComparator comparator) {
        if (colId instanceof UserApplicationLog.Identifier) {
            final UserApplicationLog.Identifier _id = (UserApplicationLog.Identifier) colId;
            switch (_id) {
                case USER_ACCOUNT_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_USER_ACCOUNT_ID;
                    final int bBegins = bRowOffset + FIELD_USER_ACCOUNT_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case JOB_POST_ID     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_JOB_POST_ID;
                    final int bBegins = bRowOffset + FIELD_JOB_POST_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "userAccountId" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_USER_ACCOUNT_ID;
                    final int bBegins = bRowOffset + FIELD_USER_ACCOUNT_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "jobPostId"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_JOB_POST_ID;
                    final int bBegins = bRowOffset + FIELD_JOB_POST_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS;
    }
}