package com.company.dbo.jobapplicationdatabase.dbo.useraccount.generated;

import com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount;
import com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccountImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserAccountSqlAdapter implements SqlAdapter<UserAccount> {
    
    private final TableIdentifier<UserAccount> tableIdentifier;
    
    protected GeneratedUserAccountSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("JobApplicationDatabase", "dbo", "UserAccount");
    }
    
    protected UserAccount apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(         resultSet.getInt(1 + offset))
            .setUserTypeId( resultSet.getInt(2 + offset))
            .setName(       resultSet.getString(3 + offset))
            .setEmail(      resultSet.getString(4 + offset))
            .setPassword(   resultSet.getString(5 + offset))
            ;
    }
    
    protected UserAccountImpl createEntity() {
        return new UserAccountImpl();
    }
    
    @Override
    public TableIdentifier<UserAccount> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, UserAccount> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, UserAccount> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}