package com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.generated;

import com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost;
import com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount;
import com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.UserApplicationLog;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.UserApplicationLog}-interface
 * representing entities of the {@code UserApplicationLog}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUserApplicationLog {
    
    /**
     * This Field corresponds to the {@link UserApplicationLog} field that can
     * be obtained using the {@link UserApplicationLog#getUserAccountId()}
     * method.
     */
    IntForeignKeyField<UserApplicationLog, Integer, UserAccount> USER_ACCOUNT_ID = DatastoreFields.createIntForeignKeyField(
        Identifier.USER_ACCOUNT_ID,
        UserApplicationLog::getUserAccountId,
        UserApplicationLog::setUserAccountId,
        UserAccount.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link UserApplicationLog} field that can
     * be obtained using the {@link UserApplicationLog#getJobPostId()} method.
     */
    IntForeignKeyField<UserApplicationLog, Integer, JobPost> JOB_POST_ID = DatastoreFields.createIntForeignKeyField(
        Identifier.JOB_POST_ID,
        UserApplicationLog::getJobPostId,
        UserApplicationLog::setJobPostId,
        JobPost.ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the userAccountId of this UserApplicationLog. The userAccountId
     * field corresponds to the database column
     * JobApplicationDatabase.dbo.UserApplicationLog.userAccountId.
     * 
     * @return the userAccountId of this UserApplicationLog
     */
    int getUserAccountId();
    
    /**
     * Returns the jobPostId of this UserApplicationLog. The jobPostId field
     * corresponds to the database column
     * JobApplicationDatabase.dbo.UserApplicationLog.jobPostId.
     * 
     * @return the jobPostId of this UserApplicationLog
     */
    int getJobPostId();
    
    /**
     * Sets the userAccountId of this UserApplicationLog. The userAccountId
     * field corresponds to the database column
     * JobApplicationDatabase.dbo.UserApplicationLog.userAccountId.
     * 
     * @param userAccountId to set of this UserApplicationLog
     * @return              this UserApplicationLog instance
     */
    UserApplicationLog setUserAccountId(int userAccountId);
    
    /**
     * Sets the jobPostId of this UserApplicationLog. The jobPostId field
     * corresponds to the database column
     * JobApplicationDatabase.dbo.UserApplicationLog.jobPostId.
     * 
     * @param jobPostId to set of this UserApplicationLog
     * @return          this UserApplicationLog instance
     */
    UserApplicationLog setJobPostId(int jobPostId);
    
    /**
     * Queries the specified manager for the referenced UserAccount. If no such
     * UserAccount exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    UserAccount findUserAccountId(Manager<UserAccount> foreignManager);
    
    /**
     * Queries the specified manager for the referenced JobPost. If no such
     * JobPost exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    JobPost findJobPostId(Manager<JobPost> foreignManager);
    
    enum Identifier implements ColumnIdentifier<UserApplicationLog> {
        
        USER_ACCOUNT_ID ("userAccountId"),
        JOB_POST_ID     ("jobPostId");
        
        private final String columnId;
        private final TableIdentifier<UserApplicationLog> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "JobApplicationDatabase";
        }
        
        @Override
        public String getSchemaId() {
            return "dbo";
        }
        
        @Override
        public String getTableId() {
            return "UserApplicationLog";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<UserApplicationLog> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}