package com.company.dbo.jobapplicationdatabase.dbo.useraccount.generated;

import com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount;
import com.company.dbo.jobapplicationdatabase.dbo.usertype.UserType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserAccountImpl implements UserAccount {
    
    private int id;
    private int userTypeId;
    private String name;
    private String email;
    private String password;
    
    protected GeneratedUserAccountImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public int getUserTypeId() {
        return userTypeId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public String getEmail() {
        return email;
    }
    
    @Override
    public String getPassword() {
        return password;
    }
    
    @Override
    public UserAccount setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public UserAccount setUserTypeId(int userTypeId) {
        this.userTypeId = userTypeId;
        return this;
    }
    
    @Override
    public UserAccount setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public UserAccount setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public UserAccount setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public UserType findUserTypeId(Manager<UserType> foreignManager) {
        return foreignManager.stream().filter(UserType.ID.equal(getUserTypeId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("userTypeId = " + Objects.toString(getUserTypeId()));
        sj.add("name = "       + Objects.toString(getName()));
        sj.add("email = "      + Objects.toString(getEmail()));
        sj.add("password = "   + Objects.toString(getPassword()));
        return "UserAccountImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof UserAccount)) { return false; }
        final UserAccount thatUserAccount = (UserAccount)that;
        if (this.getId() != thatUserAccount.getId()) { return false; }
        if (this.getUserTypeId() != thatUserAccount.getUserTypeId()) { return false; }
        if (!Objects.equals(this.getName(), thatUserAccount.getName())) { return false; }
        if (!Objects.equals(this.getEmail(), thatUserAccount.getEmail())) { return false; }
        if (!Objects.equals(this.getPassword(), thatUserAccount.getPassword())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getUserTypeId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getEmail());
        hash = 31 * hash + Objects.hashCode(getPassword());
        return hash;
    }
}