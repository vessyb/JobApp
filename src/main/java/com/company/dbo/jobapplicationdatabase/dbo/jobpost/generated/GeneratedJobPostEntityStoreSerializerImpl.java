package com.company.dbo.jobapplicationdatabase.dbo.jobpost.generated;

import com.company.dbo.jobapplicationdatabase.dbo.company.Company;
import com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost;
import com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPostImpl;
import com.company.dbo.jobapplicationdatabase.dbo.jobtype.JobType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.internal.throwable.Utf8Exception;
import com.speedment.enterprise.datastore.runtime.throwable.DeserializationException;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.enterprise.datastore.runtime.util.Utf8Util;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;

/**
 * Serializes and deserializes instances of JobPost.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedJobPostEntityStoreSerializerImpl implements EntityStoreSerializer<JobPost> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private final static int BITMAP_BEGINS = 0;
    private final static int BITMAP_IS_ACTIVE = 0;
    private final static int FIELD_ID = 1;
    private final static int FIELD_COMPANY_ID = 5;
    private final static int FIELD_JOB_TYPE_ID = 9;
    private final static int FKREF_JOB_POST_COMPANY_ID_FK = 13;
    private final static int FKREF_JOB_POST_JOB_TYPE_ID_FK = 21;
    private final static int ENDPOS_JOB_DESCRIPTION = 29;
    private final static int VARSIZE_BEGINS = 33;
    
    protected GeneratedJobPostEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, JobPost> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.put(BITMAP_BEGINS, (byte) 0);
            byte bitmap0 = (byte) 0;
            
            if (entity.getIsActive()) {
                bitmap0 |= 0b1;
            }
            buffer.putInt(FIELD_ID, entity.getId());
            buffer.putInt(FIELD_COMPANY_ID, entity.getCompanyId());
            buffer.putInt(FIELD_JOB_TYPE_ID, entity.getJobTypeId());
            buffer.putLong(FKREF_JOB_POST_COMPANY_ID_FK, -1L); // Will be set later on in the decorator()-method.
            buffer.putLong(FKREF_JOB_POST_JOB_TYPE_ID_FK, -1L); // Will be set later on in the decorator()-method.
            varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getJobDescription().getBytes());
            buffer.putInt(ENDPOS_JOB_DESCRIPTION, varSizePos);
            buffer.put(BITMAP_BEGINS, bitmap0);
            
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfInt company_idFieldCache = holder.getFieldCache(Company.ID.identifier());
        final FieldCache.OfInt jobType_idFieldCache = holder.getFieldCache(JobType.ID.identifier());
        final LongToIntFunction companyIdDeserializer = intDeserializer(JobPost.COMPANY_ID.identifier());
        final LongToIntFunction jobTypeIdDeserializer = intDeserializer(JobPost.JOB_TYPE_ID.identifier());
        final LongUnaryOperator jobPostCompanyIdFkResolver = ref -> {
            final int value = companyIdDeserializer.applyAsInt(ref);
            return company_idFieldCache.any(value);
        };
        final LongUnaryOperator jobPostJobTypeIdFkResolver = ref -> {
            final int value = jobTypeIdDeserializer.applyAsInt(ref);
            return jobType_idFieldCache.any(value);
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            buffer.putLong(rowOffset + FKREF_JOB_POST_COMPANY_ID_FK, jobPostCompanyIdFkResolver.applyAsLong(ref));
            buffer.putLong(rowOffset + FKREF_JOB_POST_JOB_TYPE_ID_FK, jobPostJobTypeIdFkResolver.applyAsLong(ref));
        };
    }
    
    @Override
    public LongFunction<JobPost> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final JobPost entity = new JobPostImpl();
            entity.setId(buffer.getInt(offset + FIELD_ID));
            entity.setCompanyId(buffer.getInt(offset + FIELD_COMPANY_ID));
            try {
                entity.setJobDescription(Utf8Util.deserialize(buffer,
                    offset + VARSIZE_BEGINS + 0,
                    offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_JOB_DESCRIPTION)
                ));
            } catch (final Utf8Exception ex) {
                final LongToIntFunction sizeOf = sizeOf();
                throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
            }
            entity.setIsActive((buffer.get(offset + BITMAP_IS_ACTIVE) & 0b1) != 0);
            entity.setJobTypeId(buffer.getInt(offset + FIELD_JOB_TYPE_ID));
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<JobPost> colId) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : return boolean.class;
                case ID              : 
                case COMPANY_ID      : 
                case JOB_TYPE_ID     : return int.class;
                case JOB_DESCRIPTION : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : return boolean.class;
                case "id"             : 
                case "companyId"      : 
                case "jobTypeId"      : return int.class;
                case "jobDescription" : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<JobPost> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<JobPost>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{companyId}->Company{id}": return finder("JobPost_Company_id_fk");
            case "{jobTypeId}->JobType{id}": return finder("JobPost_JobType_id_fk");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "JobPost_Company_id_fk": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_JOB_POST_COMPANY_ID_FK);
            case "JobPost_JobType_id_fk": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_JOB_POST_JOB_TYPE_ID_FK);
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'JobPost'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<JobPost> colId) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : 
                case ID              : 
                case COMPANY_ID      : 
                case JOB_TYPE_ID     : 
                case JOB_DESCRIPTION : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : 
                case "id"             : 
                case "companyId"      : 
                case "jobTypeId"      : 
                case "jobDescription" : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<JobPost> colId) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : 
                case ID              : 
                case COMPANY_ID      : 
                case JOB_TYPE_ID     : 
                case JOB_DESCRIPTION : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : 
                case "id"             : 
                case "companyId"      : 
                case "jobTypeId"      : 
                case "jobDescription" : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<JobPost> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<JobPost> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<JobPost> colId) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case ID          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ID);
                case COMPANY_ID  : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_COMPANY_ID);
                case JOB_TYPE_ID : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_TYPE_ID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ID);
                case "companyId" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_COMPANY_ID);
                case "jobTypeId" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_TYPE_ID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<JobPost> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<JobPost> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<JobPost> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<JobPost> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<JobPost> colId) {
        if ("isActive".equals(colId.getColumnId())) {
            return ref -> (bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_IS_ACTIVE) & 0b1) != 0;
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<JobPost> colId) {
        if ("jobDescription".equals(colId.getColumnId())) {
            return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int offset = offsetFinder.applyAsInt(ref);
                try {
                    return Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + 0,
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_JOB_DESCRIPTION)
                    );
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            };
        }
        
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", colId.getColumnId())
        );
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<JobPost> colId) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_IS_ACTIVE) & 0b1,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_IS_ACTIVE) & 0b1
                );
                case ID              : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case COMPANY_ID      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_COMPANY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_COMPANY_ID)
                );
                case JOB_TYPE_ID     : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_TYPE_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_TYPE_ID)
                );
                case JOB_DESCRIPTION : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_JOB_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_JOB_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_IS_ACTIVE) & 0b1,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_IS_ACTIVE) & 0b1
                );
                case "id"             : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "companyId"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_COMPANY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_COMPANY_ID)
                );
                case "jobTypeId"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_TYPE_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_TYPE_ID)
                );
                case "jobDescription" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_JOB_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_JOB_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<JobPost> colId) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_IS_ACTIVE) & 0b11,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_IS_ACTIVE) & 0b11
                );
                case ID              : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case COMPANY_ID      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_COMPANY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_COMPANY_ID)
                );
                case JOB_TYPE_ID     : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_TYPE_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_TYPE_ID)
                );
                case JOB_DESCRIPTION : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_JOB_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_JOB_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).get(offsetFinder.applyAsInt(aRef) + BITMAP_IS_ACTIVE) & 0b11,
                    bufferFinder.apply(bRef).get(offsetFinder.applyAsInt(bRef) + BITMAP_IS_ACTIVE) & 0b11
                );
                case "id"             : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "companyId"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_COMPANY_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_COMPANY_ID)
                );
                case "jobTypeId"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_JOB_TYPE_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_JOB_TYPE_ID)
                );
                case "jobDescription" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_JOB_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_JOB_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<JobPost> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<JobPost> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<JobPost> colId, final int value) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case ID          : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ID),
                        operand
                    );
                }
                case COMPANY_ID  : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_COMPANY_ID),
                        operand
                    );
                }
                case JOB_TYPE_ID : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_TYPE_ID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"        : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ID),
                        operand
                    );
                }
                case "companyId" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_COMPANY_ID),
                        operand
                    );
                }
                case "jobTypeId" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_JOB_TYPE_ID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<JobPost> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<JobPost> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<JobPost> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<JobPost> colId, final boolean value) {
        if ("isActive".equals(colId.getColumnId())) {
            return value
                ? ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_IS_ACTIVE) & 0b1, 0b1)
                : ref -> Integer.compare(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + BITMAP_IS_ACTIVE) & 0b1, 0);
            
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<JobPost> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<JobPost> colId, final Object value) {
        if ("jobDescription".equals(colId.getColumnId())) {
            {
                final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                final int tempSize = tempBuffer.capacity();
                return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return ByteBufferUtil.compare(buffer,
                        offset + VARSIZE_BEGINS + 0,
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_JOB_DESCRIPTION),
                        tempBuffer, 0, tempSize
                    );
                };
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type object.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<JobPost> colId) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : return ref -> -1;
                case ID              : 
                case COMPANY_ID      : 
                case JOB_TYPE_ID     : return ALWAYS_LESS;
                case JOB_DESCRIPTION : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_JOB_DESCRIPTION) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : return ref -> -1;
                case "id"             : 
                case "companyId"      : 
                case "jobTypeId"      : return ALWAYS_LESS;
                case "jobDescription" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_JOB_DESCRIPTION) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<JobPost> colId, final EntityStorePredicate predicate) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case ID              : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case COMPANY_ID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_COMPANY_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case JOB_TYPE_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_TYPE_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case JOB_DESCRIPTION : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_JOB_DESCRIPTION)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "id"             : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "companyId"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_COMPANY_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "jobTypeId"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_TYPE_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "jobDescription" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_JOB_DESCRIPTION)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<JobPost> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case ID              : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case COMPANY_ID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_COMPANY_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case JOB_TYPE_ID     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_TYPE_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case JOB_DESCRIPTION : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_JOB_DESCRIPTION)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : return ref -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "id"             : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "companyId"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_COMPANY_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "jobTypeId"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_JOB_TYPE_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "jobDescription" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_JOB_DESCRIPTION)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<JobPost> colId, final EntityStoreComparator comparator) {
        if (colId instanceof JobPost.Identifier) {
            final JobPost.Identifier _id = (JobPost.Identifier) colId;
            switch (_id) {
                case IS_ACTIVE       : return (aRef, bRef) -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case ID              : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case COMPANY_ID      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_COMPANY_ID;
                    final int bBegins = bRowOffset + FIELD_COMPANY_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case JOB_TYPE_ID     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_JOB_TYPE_ID;
                    final int bBegins = bRowOffset + FIELD_JOB_TYPE_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case JOB_DESCRIPTION : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_JOB_DESCRIPTION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_JOB_DESCRIPTION)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "isActive"       : return (aRef, bRef) -> {throw new UnsupportedOperationException("No data stored for column " + colId.getColumnId() + ".");};
                case "id"             : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "companyId"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_COMPANY_ID;
                    final int bBegins = bRowOffset + FIELD_COMPANY_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "jobTypeId"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_JOB_TYPE_ID;
                    final int bBegins = bRowOffset + FIELD_JOB_TYPE_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "jobDescription" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_JOB_DESCRIPTION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_JOB_DESCRIPTION)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_JOB_DESCRIPTION));
    }
}