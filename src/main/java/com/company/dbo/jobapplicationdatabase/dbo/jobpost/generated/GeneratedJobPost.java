package com.company.dbo.jobapplicationdatabase.dbo.jobpost.generated;

import com.company.dbo.jobapplicationdatabase.dbo.company.Company;
import com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost;
import com.company.dbo.jobapplicationdatabase.dbo.jobtype.JobType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost}-interface
 * representing entities of the {@code JobPost}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedJobPost {
    
    /**
     * This Field corresponds to the {@link JobPost} field that can be obtained
     * using the {@link JobPost#getId()} method.
     */
    IntField<JobPost, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        JobPost::getId,
        JobPost::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link JobPost} field that can be obtained
     * using the {@link JobPost#getCompanyId()} method.
     */
    IntForeignKeyField<JobPost, Integer, Company> COMPANY_ID = DatastoreFields.createIntForeignKeyField(
        Identifier.COMPANY_ID,
        JobPost::getCompanyId,
        JobPost::setCompanyId,
        Company.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link JobPost} field that can be obtained
     * using the {@link JobPost#getJobDescription()} method.
     */
    StringField<JobPost, String> JOB_DESCRIPTION = DatastoreFields.createStringField(
        Identifier.JOB_DESCRIPTION,
        JobPost::getJobDescription,
        JobPost::setJobDescription,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link JobPost} field that can be obtained
     * using the {@link JobPost#getIsActive()} method.
     */
    BooleanField<JobPost, Boolean> IS_ACTIVE = DatastoreFields.createBooleanField(
        Identifier.IS_ACTIVE,
        JobPost::getIsActive,
        JobPost::setIsActive,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link JobPost} field that can be obtained
     * using the {@link JobPost#getJobTypeId()} method.
     */
    IntForeignKeyField<JobPost, Integer, JobType> JOB_TYPE_ID = DatastoreFields.createIntForeignKeyField(
        Identifier.JOB_TYPE_ID,
        JobPost::getJobTypeId,
        JobPost::setJobTypeId,
        JobType.ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the id of this JobPost. The id field corresponds to the database
     * column JobApplicationDatabase.dbo.JobPost.id.
     * 
     * @return the id of this JobPost
     */
    int getId();
    
    /**
     * Returns the companyId of this JobPost. The companyId field corresponds to
     * the database column JobApplicationDatabase.dbo.JobPost.companyId.
     * 
     * @return the companyId of this JobPost
     */
    int getCompanyId();
    
    /**
     * Returns the jobDescription of this JobPost. The jobDescription field
     * corresponds to the database column
     * JobApplicationDatabase.dbo.JobPost.jobDescription.
     * 
     * @return the jobDescription of this JobPost
     */
    String getJobDescription();
    
    /**
     * Returns the isActive of this JobPost. The isActive field corresponds to
     * the database column JobApplicationDatabase.dbo.JobPost.isActive.
     * 
     * @return the isActive of this JobPost
     */
    boolean getIsActive();
    
    /**
     * Returns the jobTypeId of this JobPost. The jobTypeId field corresponds to
     * the database column JobApplicationDatabase.dbo.JobPost.jobTypeId.
     * 
     * @return the jobTypeId of this JobPost
     */
    int getJobTypeId();
    
    /**
     * Sets the id of this JobPost. The id field corresponds to the database
     * column JobApplicationDatabase.dbo.JobPost.id.
     * 
     * @param id to set of this JobPost
     * @return   this JobPost instance
     */
    JobPost setId(int id);
    
    /**
     * Sets the companyId of this JobPost. The companyId field corresponds to
     * the database column JobApplicationDatabase.dbo.JobPost.companyId.
     * 
     * @param companyId to set of this JobPost
     * @return          this JobPost instance
     */
    JobPost setCompanyId(int companyId);
    
    /**
     * Sets the jobDescription of this JobPost. The jobDescription field
     * corresponds to the database column
     * JobApplicationDatabase.dbo.JobPost.jobDescription.
     * 
     * @param jobDescription to set of this JobPost
     * @return               this JobPost instance
     */
    JobPost setJobDescription(String jobDescription);
    
    /**
     * Sets the isActive of this JobPost. The isActive field corresponds to the
     * database column JobApplicationDatabase.dbo.JobPost.isActive.
     * 
     * @param isActive to set of this JobPost
     * @return         this JobPost instance
     */
    JobPost setIsActive(boolean isActive);
    
    /**
     * Sets the jobTypeId of this JobPost. The jobTypeId field corresponds to
     * the database column JobApplicationDatabase.dbo.JobPost.jobTypeId.
     * 
     * @param jobTypeId to set of this JobPost
     * @return          this JobPost instance
     */
    JobPost setJobTypeId(int jobTypeId);
    
    /**
     * Queries the specified manager for the referenced Company. If no such
     * Company exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Company findCompanyId(Manager<Company> foreignManager);
    
    /**
     * Queries the specified manager for the referenced JobType. If no such
     * JobType exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    JobType findJobTypeId(Manager<JobType> foreignManager);
    
    enum Identifier implements ColumnIdentifier<JobPost> {
        
        ID              ("id"),
        COMPANY_ID      ("companyId"),
        JOB_DESCRIPTION ("jobDescription"),
        IS_ACTIVE       ("isActive"),
        JOB_TYPE_ID     ("jobTypeId");
        
        private final String columnId;
        private final TableIdentifier<JobPost> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "JobApplicationDatabase";
        }
        
        @Override
        public String getSchemaId() {
            return "dbo";
        }
        
        @Override
        public String getTableId() {
            return "JobPost";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<JobPost> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}