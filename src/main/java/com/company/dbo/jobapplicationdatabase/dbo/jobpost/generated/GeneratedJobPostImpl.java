package com.company.dbo.jobapplicationdatabase.dbo.jobpost.generated;

import com.company.dbo.jobapplicationdatabase.dbo.company.Company;
import com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost;
import com.company.dbo.jobapplicationdatabase.dbo.jobtype.JobType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedJobPostImpl implements JobPost {
    
    private int id;
    private int companyId;
    private String jobDescription;
    private boolean isActive;
    private int jobTypeId;
    
    protected GeneratedJobPostImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public int getCompanyId() {
        return companyId;
    }
    
    @Override
    public String getJobDescription() {
        return jobDescription;
    }
    
    @Override
    public boolean getIsActive() {
        return isActive;
    }
    
    @Override
    public int getJobTypeId() {
        return jobTypeId;
    }
    
    @Override
    public JobPost setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public JobPost setCompanyId(int companyId) {
        this.companyId = companyId;
        return this;
    }
    
    @Override
    public JobPost setJobDescription(String jobDescription) {
        this.jobDescription = jobDescription;
        return this;
    }
    
    @Override
    public JobPost setIsActive(boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    @Override
    public JobPost setJobTypeId(int jobTypeId) {
        this.jobTypeId = jobTypeId;
        return this;
    }
    
    @Override
    public Company findCompanyId(Manager<Company> foreignManager) {
        return foreignManager.stream().filter(Company.ID.equal(getCompanyId())).findAny().orElse(null);
    }
    
    @Override
    public JobType findJobTypeId(Manager<JobType> foreignManager) {
        return foreignManager.stream().filter(JobType.ID.equal(getJobTypeId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "             + Objects.toString(getId()));
        sj.add("companyId = "      + Objects.toString(getCompanyId()));
        sj.add("jobDescription = " + Objects.toString(getJobDescription()));
        sj.add("isActive = "       + Objects.toString(getIsActive()));
        sj.add("jobTypeId = "      + Objects.toString(getJobTypeId()));
        return "JobPostImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof JobPost)) { return false; }
        final JobPost thatJobPost = (JobPost)that;
        if (this.getId() != thatJobPost.getId()) { return false; }
        if (this.getCompanyId() != thatJobPost.getCompanyId()) { return false; }
        if (!Objects.equals(this.getJobDescription(), thatJobPost.getJobDescription())) { return false; }
        if (this.getIsActive() != thatJobPost.getIsActive()) { return false; }
        if (this.getJobTypeId() != thatJobPost.getJobTypeId()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getCompanyId());
        hash = 31 * hash + Objects.hashCode(getJobDescription());
        hash = 31 * hash + Boolean.hashCode(getIsActive());
        hash = 31 * hash + Integer.hashCode(getJobTypeId());
        return hash;
    }
}