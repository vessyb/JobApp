package com.company.dbo.jobapplicationdatabase.dbo.useraccount.generated;

import com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount;
import com.company.dbo.jobapplicationdatabase.dbo.usertype.UserType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount}-interface
 * representing entities of the {@code UserAccount}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUserAccount {
    
    /**
     * This Field corresponds to the {@link UserAccount} field that can be
     * obtained using the {@link UserAccount#getId()} method.
     */
    IntField<UserAccount, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        UserAccount::getId,
        UserAccount::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link UserAccount} field that can be
     * obtained using the {@link UserAccount#getUserTypeId()} method.
     */
    IntForeignKeyField<UserAccount, Integer, UserType> USER_TYPE_ID = DatastoreFields.createIntForeignKeyField(
        Identifier.USER_TYPE_ID,
        UserAccount::getUserTypeId,
        UserAccount::setUserTypeId,
        UserType.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link UserAccount} field that can be
     * obtained using the {@link UserAccount#getName()} method.
     */
    StringField<UserAccount, String> NAME = DatastoreFields.createStringField(
        Identifier.NAME,
        UserAccount::getName,
        UserAccount::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link UserAccount} field that can be
     * obtained using the {@link UserAccount#getEmail()} method.
     */
    StringField<UserAccount, String> EMAIL = DatastoreFields.createStringField(
        Identifier.EMAIL,
        UserAccount::getEmail,
        UserAccount::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link UserAccount} field that can be
     * obtained using the {@link UserAccount#getPassword()} method.
     */
    StringField<UserAccount, String> PASSWORD = DatastoreFields.createStringField(
        Identifier.PASSWORD,
        UserAccount::getPassword,
        UserAccount::setPassword,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this UserAccount. The id field corresponds to the
     * database column JobApplicationDatabase.dbo.UserAccount.id.
     * 
     * @return the id of this UserAccount
     */
    int getId();
    
    /**
     * Returns the userTypeId of this UserAccount. The userTypeId field
     * corresponds to the database column
     * JobApplicationDatabase.dbo.UserAccount.userTypeId.
     * 
     * @return the userTypeId of this UserAccount
     */
    int getUserTypeId();
    
    /**
     * Returns the name of this UserAccount. The name field corresponds to the
     * database column JobApplicationDatabase.dbo.UserAccount.name.
     * 
     * @return the name of this UserAccount
     */
    String getName();
    
    /**
     * Returns the email of this UserAccount. The email field corresponds to the
     * database column JobApplicationDatabase.dbo.UserAccount.email.
     * 
     * @return the email of this UserAccount
     */
    String getEmail();
    
    /**
     * Returns the password of this UserAccount. The password field corresponds
     * to the database column JobApplicationDatabase.dbo.UserAccount.password.
     * 
     * @return the password of this UserAccount
     */
    String getPassword();
    
    /**
     * Sets the id of this UserAccount. The id field corresponds to the database
     * column JobApplicationDatabase.dbo.UserAccount.id.
     * 
     * @param id to set of this UserAccount
     * @return   this UserAccount instance
     */
    UserAccount setId(int id);
    
    /**
     * Sets the userTypeId of this UserAccount. The userTypeId field corresponds
     * to the database column JobApplicationDatabase.dbo.UserAccount.userTypeId.
     * 
     * @param userTypeId to set of this UserAccount
     * @return           this UserAccount instance
     */
    UserAccount setUserTypeId(int userTypeId);
    
    /**
     * Sets the name of this UserAccount. The name field corresponds to the
     * database column JobApplicationDatabase.dbo.UserAccount.name.
     * 
     * @param name to set of this UserAccount
     * @return     this UserAccount instance
     */
    UserAccount setName(String name);
    
    /**
     * Sets the email of this UserAccount. The email field corresponds to the
     * database column JobApplicationDatabase.dbo.UserAccount.email.
     * 
     * @param email to set of this UserAccount
     * @return      this UserAccount instance
     */
    UserAccount setEmail(String email);
    
    /**
     * Sets the password of this UserAccount. The password field corresponds to
     * the database column JobApplicationDatabase.dbo.UserAccount.password.
     * 
     * @param password to set of this UserAccount
     * @return         this UserAccount instance
     */
    UserAccount setPassword(String password);
    
    /**
     * Queries the specified manager for the referenced UserType. If no such
     * UserType exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    UserType findUserTypeId(Manager<UserType> foreignManager);
    
    enum Identifier implements ColumnIdentifier<UserAccount> {
        
        ID           ("id"),
        USER_TYPE_ID ("userTypeId"),
        NAME         ("name"),
        EMAIL        ("email"),
        PASSWORD     ("password");
        
        private final String columnId;
        private final TableIdentifier<UserAccount> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "JobApplicationDatabase";
        }
        
        @Override
        public String getSchemaId() {
            return "dbo";
        }
        
        @Override
        public String getTableId() {
            return "UserAccount";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<UserAccount> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}