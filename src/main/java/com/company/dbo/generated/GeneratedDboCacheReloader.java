package com.company.dbo.generated;

import com.company.dbo.jobapplicationdatabase.dbo.company.generated.GeneratedCompanyCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.jobpost.generated.GeneratedJobPostCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.jobtype.generated.GeneratedJobTypeCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.useraccount.generated.GeneratedUserAccountCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.generated.GeneratedUserApplicationLogCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.usertype.generated.GeneratedUserTypeCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.benchmark.Stopwatch;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.DataStoreReloader;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.core.component.StreamSupplierComponent;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;

/**
 * A reloader that loads updates from a stream source and creates a new holder
 * for that state.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDboCacheReloader implements DataStoreReloader {
    
    @Override
    public DataStoreHolder reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        final CompletableFuture<GeneratedCompanyCacheHolder> companyHolder                        = GeneratedCompanyCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedJobPostCacheHolder> jobPostHolder                        = GeneratedJobPostCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedJobTypeCacheHolder> jobTypeHolder                        = GeneratedJobTypeCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedUserAccountCacheHolder> userAccountHolder                = GeneratedUserAccountCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedUserApplicationLogCacheHolder> userApplicationLogHolder  = GeneratedUserApplicationLogCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedUserTypeCacheHolder> userTypeHolder                      = GeneratedUserTypeCacheHolder.reload(streamSupplier, executor);
        
        final DataStoreHolder holder;
        try {
            holder = new GeneratedDboDataStoreHolder(
                companyHolder.get(),
                jobPostHolder.get(),
                jobTypeHolder.get(),
                userAccountHolder.get(),
                userApplicationLogHolder.get(),
                userTypeHolder.get()
            );
        } catch (final ExecutionException | InterruptedException ex) {
            throw new RuntimeException("Error reloading caches.", ex);
        }
        
        DataStoreHolderUtil.decorateEntityStores(holder, executor);
        return holder;
    }
}