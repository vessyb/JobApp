package com.company.dbo.generated;

import com.company.dbo.jobapplicationdatabase.dbo.company.Company;
import com.company.dbo.jobapplicationdatabase.dbo.company.generated.GeneratedCompanyCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.jobpost.JobPost;
import com.company.dbo.jobapplicationdatabase.dbo.jobpost.generated.GeneratedJobPostCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.jobtype.JobType;
import com.company.dbo.jobapplicationdatabase.dbo.jobtype.generated.GeneratedJobTypeCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.useraccount.UserAccount;
import com.company.dbo.jobapplicationdatabase.dbo.useraccount.generated.GeneratedUserAccountCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.UserApplicationLog;
import com.company.dbo.jobapplicationdatabase.dbo.userapplicationlog.generated.GeneratedUserApplicationLogCacheHolder;
import com.company.dbo.jobapplicationdatabase.dbo.usertype.UserType;
import com.company.dbo.jobapplicationdatabase.dbo.usertype.generated.GeneratedUserTypeCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedDboDataStoreHolder implements DataStoreHolder {
    
    private final GeneratedCompanyCacheHolder companyHolder;
    private final GeneratedJobPostCacheHolder jobPostHolder;
    private final GeneratedJobTypeCacheHolder jobTypeHolder;
    private final GeneratedUserAccountCacheHolder userAccountHolder;
    private final GeneratedUserApplicationLogCacheHolder userApplicationLogHolder;
    private final GeneratedUserTypeCacheHolder userTypeHolder;
    
    public GeneratedDboDataStoreHolder(
            GeneratedCompanyCacheHolder companyHolder,
            GeneratedJobPostCacheHolder jobPostHolder,
            GeneratedJobTypeCacheHolder jobTypeHolder,
            GeneratedUserAccountCacheHolder userAccountHolder,
            GeneratedUserApplicationLogCacheHolder userApplicationLogHolder,
            GeneratedUserTypeCacheHolder userTypeHolder) {
        this.companyHolder            = requireNonNull(companyHolder);
        this.jobPostHolder            = requireNonNull(jobPostHolder);
        this.jobTypeHolder            = requireNonNull(jobTypeHolder);
        this.userAccountHolder        = requireNonNull(userAccountHolder);
        this.userApplicationLogHolder = requireNonNull(userApplicationLogHolder);
        this.userTypeHolder           = requireNonNull(userTypeHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(
            String dbmsName,
            String schemaName,
            String tableName) {
        switch (tableName) {
            case "Company"            : return (EntityStore<ENTITY>) companyHolder.getEntityStore();
            case "JobPost"            : return (EntityStore<ENTITY>) jobPostHolder.getEntityStore();
            case "JobType"            : return (EntityStore<ENTITY>) jobTypeHolder.getEntityStore();
            case "UserAccount"        : return (EntityStore<ENTITY>) userAccountHolder.getEntityStore();
            case "UserApplicationLog" : return (EntityStore<ENTITY>) userApplicationLogHolder.getEntityStore();
            case "UserType"           : return (EntityStore<ENTITY>) userTypeHolder.getEntityStore();
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", tableName)
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        switch (columnId.getTableId()) {
            case "Company"            : return (CACHE) companyHolder.getFieldCache((ColumnIdentifier<Company>) columnId);
            case "JobPost"            : return (CACHE) jobPostHolder.getFieldCache((ColumnIdentifier<JobPost>) columnId);
            case "JobType"            : return (CACHE) jobTypeHolder.getFieldCache((ColumnIdentifier<JobType>) columnId);
            case "UserAccount"        : return (CACHE) userAccountHolder.getFieldCache((ColumnIdentifier<UserAccount>) columnId);
            case "UserApplicationLog" : return (CACHE) userApplicationLogHolder.getFieldCache((ColumnIdentifier<UserApplicationLog>) columnId);
            case "UserType"           : return (CACHE) userTypeHolder.getFieldCache((ColumnIdentifier<UserType>) columnId);
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", columnId.getTableId())
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T0, T1, CACHE extends MultiFieldCache<T0, T1, CACHE>> Optional<CACHE> getMultiFieldCache(ColumnIdentifier<ENTITY> firstColumnId, ColumnIdentifier<ENTITY> secondColumnId) {
        return Optional.empty(); // No multi-indexes are used in the project
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> boolean isHavingMultiFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return false; // No multi-indexes are used in the project
    }
    
    @Override
    public void close() {
        holders().forEach(EntityStoreHolder::close);
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.create(
            holders()
                .toArray(EntityStoreHolder[]::new)
        );
    }
    
    @Override
    public Stream<EntityStoreHolder<?>> holders() {
        return Stream.of(
            companyHolder,
            jobPostHolder,
            jobTypeHolder,
            userAccountHolder,
            userApplicationLogHolder,
            userTypeHolder
        );
    }
}